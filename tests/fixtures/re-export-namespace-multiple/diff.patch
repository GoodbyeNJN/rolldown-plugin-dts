Index: diff.patch
===================================================================
--- diff.patch
+++ diff.patch
@@ -1,5 +1,21 @@
 // index.d.ts
+type __defProp = Object.defineProperty
+type __export = (target, all) => {
+	for (var name in all) __defProp(target, name, {
+		get: all[name],
+		enumerable: true
+	});
+}
+type defs_d_exports = {}
+__export(defs_d_exports, {
+	A: () => A,
+	B: () => B,
+	C: () => C,
+	D: () => D,
+	E: () => E,
+	F: () => F
+});
 interface A {}
 declare function B(): void;
 declare class C {}
 declare enum D {
@@ -7,30 +23,12 @@
   B = 1,
 }
 declare const E: string;
 declare type F = string;
-type defs_d_A = A;
-declare const defs_d_B: typeof B;
-type defs_d_C = C;
-declare const defs_d_C: typeof C;
-type defs_d_D = D;
-declare const defs_d_D: typeof D;
-declare const defs_d_E: typeof E;
-type defs_d_F = F;
-declare namespace defs_d {
-  export { defs_d_B as B, defs_d_C as C, defs_d_D as D, defs_d_E as E };
-  export { defs_d_A as A, defs_d_F as F };
-}
-declare namespace deep_d {
-  export {
-    defs_d as ns,
-  };
-}
-type onlyOne_d_A = A;
-declare namespace onlyOne_d {
-  export { onlyOne_d_A as A };
-}
+type deep_d_exports = {}
+__export(deep_d_exports, { ns: () => defs_d_exports });
+type only_one_d_exports = {}
+__export(only_one_d_exports, { A: () => A });
 interface WithA {
   a: A;
 }
-export { deep_d as deep, defs_d as ns, onlyOne_d as onlyOne };
-export { WithA };
+export { WithA, deep_d_exports as deep, defs_d_exports as ns, only_one_d_exports as onlyOne };
